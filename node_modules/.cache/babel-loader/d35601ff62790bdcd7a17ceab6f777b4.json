{"ast":null,"code":"var _jsxFileName = \"/Users/Yoko/Desktop/YOKO/Web_full_stack/designer_blog/frontend/src/utils/Validation.js\";\nimport validator from \"validator\";\nimport React from \"react\";\nexport const required = value => {\n  if (!value.toString().trim().length) {\n    // We can return string or jsx as the 'error' prop for the validated Component\n    return React.createElement(\"span\", {\n      className: \"text-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, \" Please fill out this field.\");\n  }\n};\nexport const emailValidate = value => {\n  if (!validator.isEmail(value)) {\n    return React.createElement(\"span\", {\n      className: \"text-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, `${value} is not a valid email.`);\n  }\n};\n\nconst minLength = (value, props) => {\n  // get the maxLength from component's props\n  if (!value.toString().trim().length > props.maxLength) {\n    // Return jsx\n    return React.createElement(\"span\", {\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"The value exceeded \", props.maxLength, \" symbols.\");\n  }\n};","map":{"version":3,"sources":["/Users/Yoko/Desktop/YOKO/Web_full_stack/designer_blog/frontend/src/utils/Validation.js"],"names":["validator","React","required","value","toString","trim","length","emailValidate","isEmail","minLength","props","maxLength"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AAC/B,MAAI,CAACA,KAAK,CAACC,QAAN,GAAiBC,IAAjB,GAAwBC,MAA7B,EAAqC;AACnC;AACA,WAAO;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAP;AACD;AACF,CALM;AAOP,OAAO,MAAMC,aAAa,GAAGJ,KAAK,IAAI;AACpC,MAAI,CAACH,SAAS,CAACQ,OAAV,CAAkBL,KAAlB,CAAL,EAA+B;AAC7B,WACE;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgC,GAAEA,KAAM,wBAAxC,CADF;AAGD;AACF,CANM;;AAQP,MAAMM,SAAS,GAAG,CAACN,KAAD,EAAQO,KAAR,KAAkB;AAClC;AACA,MAAI,CAACP,KAAK,CAACC,QAAN,GAAiBC,IAAjB,GAAwBC,MAAzB,GAAkCI,KAAK,CAACC,SAA5C,EAAuD;AACrD;AACA,WAAO;AAAM,MAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAA4CD,KAAK,CAACC,SAAlD,cAAP;AACD;AACF,CAND","sourcesContent":["import validator from \"validator\";\nimport React from \"react\";\n\nexport const required = value => {\n  if (!value.toString().trim().length) {\n    // We can return string or jsx as the 'error' prop for the validated Component\n    return <span className=\"text-danger\"> Please fill out this field.</span>;\n  }\n};\n\nexport const emailValidate = value => {\n  if (!validator.isEmail(value)) {\n    return (\n      <span className=\"text-danger\">{`${value} is not a valid email.`}</span>\n    );\n  }\n};\n\nconst minLength = (value, props) => {\n  // get the maxLength from component's props\n  if (!value.toString().trim().length > props.maxLength) {\n    // Return jsx\n    return <span className=\"error\">The value exceeded {props.maxLength} symbols.</span>\n  }\n};\n"]},"metadata":{},"sourceType":"module"}